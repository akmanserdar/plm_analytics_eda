# -*- coding: utf-8 -*-
"""plm_analytics_eda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1muy5p0UiMOgcWDzuX-qPtJtL-XaFDGDl
"""

#############################################
# Advanced Functional Exploratory Data Analysis (EDA)
#############################################
# 1. Data Understanding
# 2. Analysis of Categorical Variables
# 3. Analysis of Target Variable
# 4. Analysis of Correlation
# 5. Visualization of Target and Independent Variables

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

##########################
# 1. Data Understanding
##########################

# Read Excel file
df = pd.read_excel('/content/plm_approvals.xlsx')


def check_df(dataframe, head=5):
    print("############################ Info #############################")
    print(dataframe.info())
    print("\n############################ Shape ############################")
    print(dataframe.shape)
    print("\n############################ Types ############################")
    print(dataframe.dtypes)
    print("\n############################ Head #############################")
    print(dataframe.head(head))
    print("\n############################ Tail #############################")
    print(dataframe.tail(head))
    print("\n##################### Missing Values (NA) #####################")
    print(dataframe.isnull().sum())
    print("\n########################## Quantiles ##########################")
    print(dataframe.describe([0, 0.05, 0.50, 0.95, 0.99, 1]).T)
    print("\n######################## Unique Values ########################")
    print(dataframe.nunique())

check_df(df)

#############################################
# 2. Analysis of Categorical Variables
#############################################

def cat_summary(dataframe, col_name):
    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),
                        "Ratio": 100 * dataframe[col_name].value_counts() / len(dataframe)}))

cat_summary(df, "Change_Type")

cat_summary(df, "Department")

cat_summary(df, "Requested_By")

cat_summary(df, "Complexity")

#############################################
# 3. Analysis of Target Variable
#############################################

cat_summary(df, "Approval_Days")

def target_summary_with_cat(dataframe, target, categorical_col):
    print(pd.DataFrame({"TARGET_MEAN": dataframe.groupby(categorical_col)[target].mean()}), end="\n\n\n")

cat_cols= ["Complexity", "Change_Type", "Department", "Requested_By"]

for col in cat_cols:
    target_summary_with_cat(df, "Approval_Days", col)

#############################################
# 4. Analysis of Correlation
#############################################

# Converting categorical variables to numeric values using one-hot encoding
df_one_hot = pd.get_dummies(df, drop_first=True)

# Heatmap to show correlation between numerical variables
plt.figure(figsize=(17, 10))
sns.heatmap(df_one_hot.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

#############################################
# 5. Visualization of Target and Independent Variables
#############################################

# Distribution of Approval_Days
plt.figure(figsize=(10, 6))
sns.histplot(df['Approval_Days'], bins=30, kde=True)
plt.title('Distribution of Approval Days')
plt.xlabel('Approval Days')
plt.ylabel('Frequency')
plt.show()

# Boxplot to check for outliers in Approval_Days
plt.figure(figsize=(10, 6))
sns.boxplot(x=df['Approval_Days'])
plt.title('Boxplot of Approval Days')
plt.xlabel('Approval Days')
plt.show()

# Average Approval Time by Change Type and Department
avg_approval = df.groupby(['Department', 'Change_Type'])['Approval_Days'].mean().unstack()
avg_approval.plot(kind='bar', figsize=(10, 6))
plt.xlabel('Department')
plt.ylabel('Average Approval Days')
plt.title('Average Approval Time by Change Type and Department')
plt.xticks(rotation=0)
_ = plt.legend(title='Change Type')

# Distribution of Change Types
plt.figure(figsize=(6, 6))
df['Change_Type'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.ylabel('')
_ = plt.title('Distribution of Change Types')

# Count plot for Change Type
plt.figure(figsize=(10, 6))
sns.countplot(y='Change_Type', data=df)
plt.title('Count of Change Types')
plt.xlabel('Count')
plt.ylabel('Change Type')
plt.show()

# Count plot for Departments
plt.figure(figsize=(10, 6))
sns.countplot(y='Department', data=df)
plt.title('Count of Departments')
plt.xlabel('Count')
plt.ylabel('Department')
plt.show()

# Count plot for Requests By User
plt.figure(figsize=(10, 6))
sns.countplot(y='Requested_By', data=df)
plt.title('Count of Requests by User')
plt.xlabel('Count')
plt.ylabel('Requested By')
plt.show()

# Scatter plot to visualize the relationship between Approval_Days and Complexity
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Complexity', y='Approval_Days', hue='Requested_By',  size="Requested_By", data=df, palette='Set1')
plt.title('Approval Days vs Complexity')
plt.xlabel('Complexity')
plt.ylabel('Approval Days')
plt.legend(title='Requested By')
plt.show()

# Scatter plot to visualize the relationship between Approval_Days and Department
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Department', y='Approval_Days', hue='Requested_By',  size="Requested_By", data=df, palette="Set1")
plt.title('Approval Days vs Department')
plt.xlabel('Department')
plt.ylabel('Approval Days')
plt.legend(title='Requested By')
plt.show()

# Change_Type vs Complexity
figsize = (10, 1.2 * len(df['Change_Type'].unique()))
plt.figure(figsize=figsize)
sns.violinplot(data=df, x='Complexity', y='Change_Type', hue='Change_Type', inner='stick', palette='Dark2', legend=False)
sns.despine(top=True, right=True, bottom=True, left=True)
plt.title('Change Type vs Complexity')
plt.xlabel('Complexity')
plt.ylabel('Change Type')
#plt.legend(title='Change Type')
plt.show()

# Distribution of Change Complexity by Department
plt.figure(figsize=(12, 6))
plt.boxplot([df[df['Department'] == dept]['Complexity'] for dept in df['Department'].unique()],
            labels=df['Department'].unique(), patch_artist=True)
plt.xlabel('Department')
plt.ylabel('Complexity')
_ = plt.title('Distribution of Change Complexity by Department')

# Change Type Distribution by Department
df.groupby('Department')['Change_Type'].value_counts(normalize=True).unstack().plot(kind='bar', stacked=True, figsize=(10, 6))
plt.xlabel('Department')
plt.ylabel('Proportion of Change Types')
plt.title('Change Type Distribution by Department')
_ = plt.legend(title='Change Type')

# Change Type Distribution by Requester
change_type_counts = df.groupby(['Requested_By', 'Change_Type'])['Change_Type'].count().unstack()
change_type_counts.plot(kind='bar', stacked=True, figsize=(10, 6))
plt.xlabel('Requested By')
plt.ylabel('Number of Changes')
_ = plt.title('Change Type Distribution by Requester')

##########################
# Bonus
##########################

# Filtering data where Approval Days > 18 and Complexity > 7
filtered_df = df[(df['Approval_Days'] > 18) & (df['Complexity'] > 7)]

# Display the filtered data and sort for Approval_days
ascending_df = filtered_df.sort_values(by='Approval_Days', ascending=False)
print(ascending_df)